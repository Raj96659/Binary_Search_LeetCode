Problem statement
You are given an array 'arr' sorted in non-decreasing order and a number 'x'.

You must return the index of lower bound of 'x'.

Note:
For a sorted array 'arr', 'lower_bound' of a number 'x' is defined as the smallest index 'idx' such that the value 'arr[idx]' is not less than 'x'

If all numbers are smaller than 'x', then 'n' should be the 'lower_bound' of 'x', where 'n' is the size of array.

3.	Example 1:
4.	Input Format: N = 4, arr[] = {1,2,2,3}, x = 2
5.	Result: 1
6.	Explanation: Index 1 is the smallest index such that arr[1] >= x.


int lowerBound(vector<int> arr, int n, int x) {
	// Write your code here
	int low=0;
	int high=n-1;
	int ans=n;
	while(low<=high)
	{
		int mid=(low+high)/2;
		if(arr[mid]>=x)
		{
			ans=mid;
			high=mid-1;
		}
		else
		{
			low=mid+1;
		}
	}
	return ans;
}
